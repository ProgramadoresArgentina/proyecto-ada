generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  username          String
  email             String        @unique
  published         Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updateAt          DateTime      @updatedAt
  cvEmail           Cv?           @relation("UserEmail")
  cvId              Cv?           @relation("UserId")
  userSettingsEmail UserSettings? @relation("UserEmail")
  userSettingsId    UserSettings? @relation("UserId")
}

model UserSettings {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  role        Role   @default(USER)
  avatar      String
  description String
  emailUser   String @unique
  userId      Int    @unique
  email       User   @relation("UserEmail", fields: [emailUser], references: [email], onDelete: Cascade, onUpdate: Restrict)
  user        User   @relation("UserId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Cv {
  id             Int              @id @default(autoincrement())
  title          String
  published      Boolean          @default(false)
  userId         Int              @unique
  emailUser      String           @unique
  certifications Certifications[]
  email          User             @relation("UserEmail", fields: [emailUser], references: [email], onDelete: Cascade, onUpdate: Restrict)
  user           User             @relation("UserId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  education      Education[]
  experience     Experience[]
}

model Experience {
  id           Int      @id @default(autoincrement())
  title        String
  startYear    DateTime
  endYear      DateTime
  description  Json?
  experienceId Int
  experience   Cv       @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Education {
  id          Int      @id @default(autoincrement())
  title       String
  startYear   DateTime
  endYear     DateTime
  description Json?
  educationId Int
  education   Cv       @relation(fields: [educationId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Certifications {
  id               Int      @id @default(autoincrement())
  title            String?
  description      Json?
  startYear        DateTime
  endYear          DateTime
  certificationsId Int
  certifications   Cv       @relation(fields: [certificationsId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Events {
  id        Int      @id @default(autoincrement())
  title     String
  link      String
  createdAt DateTime
  expiredAt DateTime
}

enum Role {
  USER
  ADMIN
}
