// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELO DE USUARIO
model User {
  id Int @id @default(autoincrement())
  username String 
  email String @unique
  published Boolean @default(true)
  createdAt DateTime @default(now()) 
  updateAt DateTime  @updatedAt 
  
  cv Cv?
  userSettings UserSettings? 
  articles Articles[]
}

// MODELO PERFIL
model UserSettings{
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  role Role @default(USER)
  avatar String
  description String
  url String @unique @default(uuid())
  
  // Relation
  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId Int @unique
}

// MODELO DE CV
model Cv {
  id Int @id @default(autoincrement())
  title String
  published Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId Int @unique
  
  experience Experience[]
  education Education[]
  certifications Certifications[]
}

model Experience {
    id Int @id @default(autoincrement())
    title String
    startYear DateTime
    endYear DateTime
    description Json ?
    //Relation 1:n with CV
    experience Cv @relation(fields: [experienceId], references: [id], onUpdate: Restrict, onDelete: Cascade) 
    experienceId Int
}

model Education{
  id Int @id @default(autoincrement())
  title String
  startYear DateTime 
  endYear DateTime
  description Json ?
  //Relation 1:n with CV
  education Cv @relation(fields: [educationId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  educationId Int 
}

model Certifications {
  id Int @id @default(autoincrement())
  title String ?
  description Json?
  startYear DateTime
  endYear DateTime
  //Relation 1:n with CV
  certifications Cv @relation(fields: [certificationsId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  certificationsId Int
}

// ROLES
enum Role {
  USER
  ADMIN
}

// MODELO DE ARTICULOS
model Articles {
  id Int @id @default(autoincrement())
  title String
  content String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation 1-n con usuario
  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId Int

  // Relation m-n con Hashtags
  hashtags Hashtags[] 
}

// MODELO DE HASHTAGS
model Hashtags {
  id Int @id @default(autoincrement())
  name String 
  // Relation m-n con Articulos
  articles Articles[]
}