generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String 
  email String @unique
  published Boolean @default(true)
  createdAt DateTime @default(now()) 
  updateAt DateTime  @updatedAt
  cv Cv[]
  userSettings UserSettings? 
  articles Articles[]
  achievements Achievements[]
}

// MODELO PERFIL
model UserSettings{
  id               Int @id @default(autoincrement())
  firstName        String?
  lastName         String?
  linkedin         String?
  github           String?
  behance          String?
  minidescription  String?
  description      String?
  role             Role @default(USER)
  status           Status @default(BUSCANDO)
  experienceLevel  ExperienceLevel @default(TRAINEE)
  avatar           String
  url              String @unique @default(uuid())
  position         Position[]
  // Relation
  user             User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId           Int @unique
}

model Cv {
  id              Int @id @default(autoincrement())
  title           String
  published       Boolean @default(false)
  user User       @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId          Int
  experience      Experience[]
  education       Education[]
  certifications  Certifications[]
  languages       Languages[]
}

model Experience {
  id            Int      @id @default(autoincrement())
  title         String
  company       String
  dateSince     DateTime
  dateTo        DateTime?
  currently     Boolean
  description   Json?
  experienceId  Int
  experience   Cv       @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Education {
  id            Int      @id @default(autoincrement())
  degree        String
  university    String
  dateSince     DateTime
  dateTo        DateTime?
  currently     Boolean
  description   Json?
  educationId   Int
  education     Cv      @relation(fields: [educationId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Certifications {
  id               Int      @id @default(autoincrement())
  degree           String
  university       String
  linkId       String
  certificationsId Int
  certifications   Cv       @relation(fields: [certificationsId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Languages{
  id     Int @id @default(autoincrement())
  name   String
  level  LanguageLevel
  languagesId Int
  languages   Cv       @relation(fields: [languagesId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

enum LanguageLevel{
    A1_A2
    B1_B2
    C1_C2 
    NATIVE
}

model Events {
  id        Int      @id @default(autoincrement())
  title     String
  link      String
  createdAt DateTime
  expiredAt DateTime
}

enum Role {
  USER
  ADMIN
}

enum ExperienceLevel {
  TRAINEE
  JUNIOR
  SEMI_SENIOR
  SENIOR
}

enum Status {
	CONTRATANDO
	BUSCANDO
  MIEMBRO
}

enum Position {
  FULLSTACK
  FRONTEND
  BACKEND
  TESTER
  DEVOPS
  DATA_SCIENCE
  LEADER
  VIDEOGAMES
  CRYPTO
  CYBERSECURITY
  UX_UI
  ADMIN_SYSTEM
}
// MODELO DE ARTICULOS
model Articles {
  id Int @id @default(autoincrement())
  title String
  content String
  image String
  views Int @default(0)
  url String @unique
  viewsPerDay Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation 1-n con usuario
  user User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId Int

  // Relation m-n con Hashtags
  hashtags Hashtags[] 
}

// MODELO DE HASHTAGS
model Hashtags {
  id Int @id @default(autoincrement())
  name String 
  // Relation m-n con Articulos
  articles Articles[]
}

model Achievements {
  id Int @id @default(autoincrement())
  name String
  icon String
  users User[]
}